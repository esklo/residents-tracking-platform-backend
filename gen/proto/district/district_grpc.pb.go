// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: district/district.proto

package district

import (
	context "context"
	empty "github.com/esklo/residents-tracking-platform-backend/gen/proto/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DistrictServiceClient is the client API for DistrictService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistrictServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*District, error)
	GetById(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*District, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Update(ctx context.Context, in *District, opts ...grpc.CallOption) (*District, error)
	Delete(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type districtServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDistrictServiceClient(cc grpc.ClientConnInterface) DistrictServiceClient {
	return &districtServiceClient{cc}
}

func (c *districtServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*District, error) {
	out := new(District)
	err := c.cc.Invoke(ctx, "/district.DistrictService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *districtServiceClient) GetById(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*District, error) {
	out := new(District)
	err := c.cc.Invoke(ctx, "/district.DistrictService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *districtServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/district.DistrictService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *districtServiceClient) Update(ctx context.Context, in *District, opts ...grpc.CallOption) (*District, error) {
	out := new(District)
	err := c.cc.Invoke(ctx, "/district.DistrictService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *districtServiceClient) Delete(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/district.DistrictService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistrictServiceServer is the server API for DistrictService service.
// All implementations must embed UnimplementedDistrictServiceServer
// for forward compatibility
type DistrictServiceServer interface {
	Create(context.Context, *CreateRequest) (*District, error)
	GetById(context.Context, *ByIdRequest) (*District, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Update(context.Context, *District) (*District, error)
	Delete(context.Context, *ByIdRequest) (*empty.Empty, error)
	mustEmbedUnimplementedDistrictServiceServer()
}

// UnimplementedDistrictServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDistrictServiceServer struct {
}

func (UnimplementedDistrictServiceServer) Create(context.Context, *CreateRequest) (*District, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDistrictServiceServer) GetById(context.Context, *ByIdRequest) (*District, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedDistrictServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDistrictServiceServer) Update(context.Context, *District) (*District, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDistrictServiceServer) Delete(context.Context, *ByIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDistrictServiceServer) mustEmbedUnimplementedDistrictServiceServer() {}

// UnsafeDistrictServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistrictServiceServer will
// result in compilation errors.
type UnsafeDistrictServiceServer interface {
	mustEmbedUnimplementedDistrictServiceServer()
}

func RegisterDistrictServiceServer(s grpc.ServiceRegistrar, srv DistrictServiceServer) {
	s.RegisterService(&DistrictService_ServiceDesc, srv)
}

func _DistrictService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistrictServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/district.DistrictService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistrictServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistrictService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistrictServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/district.DistrictService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistrictServiceServer).GetById(ctx, req.(*ByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistrictService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistrictServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/district.DistrictService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistrictServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistrictService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(District)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistrictServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/district.DistrictService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistrictServiceServer).Update(ctx, req.(*District))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistrictService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistrictServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/district.DistrictService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistrictServiceServer).Delete(ctx, req.(*ByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DistrictService_ServiceDesc is the grpc.ServiceDesc for DistrictService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DistrictService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "district.DistrictService",
	HandlerType: (*DistrictServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _DistrictService_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _DistrictService_GetById_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DistrictService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DistrictService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DistrictService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "district/district.proto",
}
