// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/repository.go -destination=mocks/repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	model "github.com/esklo/residents-tracking-platform-backend/internal/model"
	webauthn "github.com/go-webauthn/webauthn/webauthn"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepository) Create(ctx context.Context, user *model.User) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryMockRecorder) Create(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), ctx, user)
}

// GetAll mocks base method.
func (m *MockUserRepository) GetAll(ctx context.Context) ([]*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockUserRepositoryMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUserRepository)(nil).GetAll), ctx)
}

// GetAllWithDepartmentIds mocks base method.
func (m *MockUserRepository) GetAllWithDepartmentIds(ctx context.Context, departmentIds []string) ([]*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWithDepartmentIds", ctx, departmentIds)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWithDepartmentIds indicates an expected call of GetAllWithDepartmentIds.
func (mr *MockUserRepositoryMockRecorder) GetAllWithDepartmentIds(ctx, departmentIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWithDepartmentIds", reflect.TypeOf((*MockUserRepository)(nil).GetAllWithDepartmentIds), ctx, departmentIds)
}

// GetByEmail mocks base method.
func (m *MockUserRepository) GetByEmail(ctx context.Context, email string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", ctx, email)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserRepositoryMockRecorder) GetByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetByEmail), ctx, email)
}

// GetByID mocks base method.
func (m *MockUserRepository) GetByID(ctx context.Context, id string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserRepository)(nil).GetByID), ctx, id)
}

// Update mocks base method.
func (m *MockUserRepository) Update(ctx context.Context, user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserRepositoryMockRecorder) Update(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepository)(nil).Update), ctx, user)
}

// MockDistrictRepository is a mock of DistrictRepository interface.
type MockDistrictRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDistrictRepositoryMockRecorder
}

// MockDistrictRepositoryMockRecorder is the mock recorder for MockDistrictRepository.
type MockDistrictRepositoryMockRecorder struct {
	mock *MockDistrictRepository
}

// NewMockDistrictRepository creates a new mock instance.
func NewMockDistrictRepository(ctrl *gomock.Controller) *MockDistrictRepository {
	mock := &MockDistrictRepository{ctrl: ctrl}
	mock.recorder = &MockDistrictRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDistrictRepository) EXPECT() *MockDistrictRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDistrictRepository) Create(ctx context.Context, district *model.District) (*model.District, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, district)
	ret0, _ := ret[0].(*model.District)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDistrictRepositoryMockRecorder) Create(ctx, district any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDistrictRepository)(nil).Create), ctx, district)
}

// GetAll mocks base method.
func (m *MockDistrictRepository) GetAll(ctx context.Context) ([]*model.District, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*model.District)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockDistrictRepositoryMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockDistrictRepository)(nil).GetAll), ctx)
}

// GetByID mocks base method.
func (m *MockDistrictRepository) GetByID(ctx context.Context, id string) (*model.District, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.District)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockDistrictRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockDistrictRepository)(nil).GetByID), ctx, id)
}

// MockWebAuthnRepository is a mock of WebAuthnRepository interface.
type MockWebAuthnRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWebAuthnRepositoryMockRecorder
}

// MockWebAuthnRepositoryMockRecorder is the mock recorder for MockWebAuthnRepository.
type MockWebAuthnRepositoryMockRecorder struct {
	mock *MockWebAuthnRepository
}

// NewMockWebAuthnRepository creates a new mock instance.
func NewMockWebAuthnRepository(ctrl *gomock.Controller) *MockWebAuthnRepository {
	mock := &MockWebAuthnRepository{ctrl: ctrl}
	mock.recorder = &MockWebAuthnRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebAuthnRepository) EXPECT() *MockWebAuthnRepositoryMockRecorder {
	return m.recorder
}

// AddUserCredential mocks base method.
func (m *MockWebAuthnRepository) AddUserCredential(ctx context.Context, userId string, credentialId []byte, credential *webauthn.Credential, requestedFrom string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserCredential", ctx, userId, credentialId, credential, requestedFrom)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserCredential indicates an expected call of AddUserCredential.
func (mr *MockWebAuthnRepositoryMockRecorder) AddUserCredential(ctx, userId, credentialId, credential, requestedFrom any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserCredential", reflect.TypeOf((*MockWebAuthnRepository)(nil).AddUserCredential), ctx, userId, credentialId, credential, requestedFrom)
}

// DeleteCredentialById mocks base method.
func (m *MockWebAuthnRepository) DeleteCredentialById(ctx context.Context, id []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCredentialById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCredentialById indicates an expected call of DeleteCredentialById.
func (mr *MockWebAuthnRepositoryMockRecorder) DeleteCredentialById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCredentialById", reflect.TypeOf((*MockWebAuthnRepository)(nil).DeleteCredentialById), ctx, id)
}

// Get mocks base method.
func (m *MockWebAuthnRepository) Get(ctx context.Context, id string) (*webauthn.SessionData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*webauthn.SessionData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockWebAuthnRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWebAuthnRepository)(nil).Get), ctx, id)
}

// GetUserIdByCredentialId mocks base method.
func (m *MockWebAuthnRepository) GetUserIdByCredentialId(ctx context.Context, id []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIdByCredentialId", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIdByCredentialId indicates an expected call of GetUserIdByCredentialId.
func (mr *MockWebAuthnRepositoryMockRecorder) GetUserIdByCredentialId(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIdByCredentialId", reflect.TypeOf((*MockWebAuthnRepository)(nil).GetUserIdByCredentialId), ctx, id)
}

// GetUserPublicKeys mocks base method.
func (m *MockWebAuthnRepository) GetUserPublicKeys(ctx context.Context, userId string) ([]model.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPublicKeys", ctx, userId)
	ret0, _ := ret[0].([]model.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPublicKeys indicates an expected call of GetUserPublicKeys.
func (mr *MockWebAuthnRepositoryMockRecorder) GetUserPublicKeys(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPublicKeys", reflect.TypeOf((*MockWebAuthnRepository)(nil).GetUserPublicKeys), ctx, userId)
}

// Set mocks base method.
func (m *MockWebAuthnRepository) Set(ctx context.Context, id string, session *webauthn.SessionData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, id, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockWebAuthnRepositoryMockRecorder) Set(ctx, id, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockWebAuthnRepository)(nil).Set), ctx, id, session)
}

// UpdateUserCredential mocks base method.
func (m *MockWebAuthnRepository) UpdateUserCredential(ctx context.Context, userId string, credentialId []byte, credential *webauthn.Credential) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserCredential", ctx, userId, credentialId, credential)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserCredential indicates an expected call of UpdateUserCredential.
func (mr *MockWebAuthnRepositoryMockRecorder) UpdateUserCredential(ctx, userId, credentialId, credential any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserCredential", reflect.TypeOf((*MockWebAuthnRepository)(nil).UpdateUserCredential), ctx, userId, credentialId, credential)
}

// MockFileRepository is a mock of FileRepository interface.
type MockFileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFileRepositoryMockRecorder
}

// MockFileRepositoryMockRecorder is the mock recorder for MockFileRepository.
type MockFileRepositoryMockRecorder struct {
	mock *MockFileRepository
}

// NewMockFileRepository creates a new mock instance.
func NewMockFileRepository(ctrl *gomock.Controller) *MockFileRepository {
	mock := &MockFileRepository{ctrl: ctrl}
	mock.recorder = &MockFileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileRepository) EXPECT() *MockFileRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFileRepository) Create(ctx context.Context, file *model.File) (*model.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, file)
	ret0, _ := ret[0].(*model.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFileRepositoryMockRecorder) Create(ctx, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFileRepository)(nil).Create), ctx, file)
}

// Delete mocks base method.
func (m *MockFileRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFileRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFileRepository)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockFileRepository) GetByID(ctx context.Context, id string) (*model.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockFileRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockFileRepository)(nil).GetByID), ctx, id)
}

// MockDepartmentRepository is a mock of DepartmentRepository interface.
type MockDepartmentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDepartmentRepositoryMockRecorder
}

// MockDepartmentRepositoryMockRecorder is the mock recorder for MockDepartmentRepository.
type MockDepartmentRepositoryMockRecorder struct {
	mock *MockDepartmentRepository
}

// NewMockDepartmentRepository creates a new mock instance.
func NewMockDepartmentRepository(ctrl *gomock.Controller) *MockDepartmentRepository {
	mock := &MockDepartmentRepository{ctrl: ctrl}
	mock.recorder = &MockDepartmentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDepartmentRepository) EXPECT() *MockDepartmentRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDepartmentRepository) Create(ctx context.Context, department *model.Department) (*model.Department, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, department)
	ret0, _ := ret[0].(*model.Department)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDepartmentRepositoryMockRecorder) Create(ctx, department any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDepartmentRepository)(nil).Create), ctx, department)
}

// GetAll mocks base method.
func (m *MockDepartmentRepository) GetAll(ctx context.Context) ([]*model.Department, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*model.Department)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockDepartmentRepositoryMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockDepartmentRepository)(nil).GetAll), ctx)
}

// GetAllWithDistrictId mocks base method.
func (m *MockDepartmentRepository) GetAllWithDistrictId(ctx context.Context, districtId string) ([]*model.Department, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWithDistrictId", ctx, districtId)
	ret0, _ := ret[0].([]*model.Department)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWithDistrictId indicates an expected call of GetAllWithDistrictId.
func (mr *MockDepartmentRepositoryMockRecorder) GetAllWithDistrictId(ctx, districtId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWithDistrictId", reflect.TypeOf((*MockDepartmentRepository)(nil).GetAllWithDistrictId), ctx, districtId)
}

// GetByID mocks base method.
func (m *MockDepartmentRepository) GetByID(ctx context.Context, id string) (*model.Department, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.Department)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockDepartmentRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockDepartmentRepository)(nil).GetByID), ctx, id)
}

// Update mocks base method.
func (m *MockDepartmentRepository) Update(ctx context.Context, department *model.Department) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, department)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDepartmentRepositoryMockRecorder) Update(ctx, department any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDepartmentRepository)(nil).Update), ctx, department)
}

// MockThemeRepository is a mock of ThemeRepository interface.
type MockThemeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockThemeRepositoryMockRecorder
}

// MockThemeRepositoryMockRecorder is the mock recorder for MockThemeRepository.
type MockThemeRepositoryMockRecorder struct {
	mock *MockThemeRepository
}

// NewMockThemeRepository creates a new mock instance.
func NewMockThemeRepository(ctrl *gomock.Controller) *MockThemeRepository {
	mock := &MockThemeRepository{ctrl: ctrl}
	mock.recorder = &MockThemeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThemeRepository) EXPECT() *MockThemeRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockThemeRepository) Create(ctx context.Context, theme *model.Theme) (*model.Theme, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, theme)
	ret0, _ := ret[0].(*model.Theme)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockThemeRepositoryMockRecorder) Create(ctx, theme any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockThemeRepository)(nil).Create), ctx, theme)
}

// GetAll mocks base method.
func (m *MockThemeRepository) GetAll(ctx context.Context, onlyDeleted bool) ([]*model.Theme, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, onlyDeleted)
	ret0, _ := ret[0].([]*model.Theme)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockThemeRepositoryMockRecorder) GetAll(ctx, onlyDeleted any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockThemeRepository)(nil).GetAll), ctx, onlyDeleted)
}

// GetAllWithDepartmentIds mocks base method.
func (m *MockThemeRepository) GetAllWithDepartmentIds(ctx context.Context, departmentIds []string, onlyDeleted bool) ([]*model.Theme, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWithDepartmentIds", ctx, departmentIds, onlyDeleted)
	ret0, _ := ret[0].([]*model.Theme)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWithDepartmentIds indicates an expected call of GetAllWithDepartmentIds.
func (mr *MockThemeRepositoryMockRecorder) GetAllWithDepartmentIds(ctx, departmentIds, onlyDeleted any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWithDepartmentIds", reflect.TypeOf((*MockThemeRepository)(nil).GetAllWithDepartmentIds), ctx, departmentIds, onlyDeleted)
}

// GetByID mocks base method.
func (m *MockThemeRepository) GetByID(ctx context.Context, id string) (*model.Theme, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.Theme)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockThemeRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockThemeRepository)(nil).GetByID), ctx, id)
}

// Update mocks base method.
func (m *MockThemeRepository) Update(ctx context.Context, theme *model.Theme) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, theme)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockThemeRepositoryMockRecorder) Update(ctx, theme any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockThemeRepository)(nil).Update), ctx, theme)
}

// MockContactRepository is a mock of ContactRepository interface.
type MockContactRepository struct {
	ctrl     *gomock.Controller
	recorder *MockContactRepositoryMockRecorder
}

// MockContactRepositoryMockRecorder is the mock recorder for MockContactRepository.
type MockContactRepositoryMockRecorder struct {
	mock *MockContactRepository
}

// NewMockContactRepository creates a new mock instance.
func NewMockContactRepository(ctrl *gomock.Controller) *MockContactRepository {
	mock := &MockContactRepository{ctrl: ctrl}
	mock.recorder = &MockContactRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContactRepository) EXPECT() *MockContactRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockContactRepository) Create(ctx context.Context, contact *model.Contact) (*model.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, contact)
	ret0, _ := ret[0].(*model.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockContactRepositoryMockRecorder) Create(ctx, contact any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockContactRepository)(nil).Create), ctx, contact)
}

// GetByID mocks base method.
func (m *MockContactRepository) GetByID(ctx context.Context, id string) (*model.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockContactRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockContactRepository)(nil).GetByID), ctx, id)
}

// Update mocks base method.
func (m *MockContactRepository) Update(ctx context.Context, contact *model.Contact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, contact)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockContactRepositoryMockRecorder) Update(ctx, contact any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockContactRepository)(nil).Update), ctx, contact)
}

// MockRequestRepository is a mock of RequestRepository interface.
type MockRequestRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRequestRepositoryMockRecorder
}

// MockRequestRepositoryMockRecorder is the mock recorder for MockRequestRepository.
type MockRequestRepositoryMockRecorder struct {
	mock *MockRequestRepository
}

// NewMockRequestRepository creates a new mock instance.
func NewMockRequestRepository(ctrl *gomock.Controller) *MockRequestRepository {
	mock := &MockRequestRepository{ctrl: ctrl}
	mock.recorder = &MockRequestRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestRepository) EXPECT() *MockRequestRepositoryMockRecorder {
	return m.recorder
}

// AddFile mocks base method.
func (m *MockRequestRepository) AddFile(ctx context.Context, requestId, fileId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFile", ctx, requestId, fileId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFile indicates an expected call of AddFile.
func (mr *MockRequestRepositoryMockRecorder) AddFile(ctx, requestId, fileId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFile", reflect.TypeOf((*MockRequestRepository)(nil).AddFile), ctx, requestId, fileId)
}

// Create mocks base method.
func (m *MockRequestRepository) Create(ctx context.Context, request *model.Request) (*model.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, request)
	ret0, _ := ret[0].(*model.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRequestRepositoryMockRecorder) Create(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRequestRepository)(nil).Create), ctx, request)
}

// GetAll mocks base method.
func (m *MockRequestRepository) GetAll(ctx context.Context) ([]*model.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*model.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRequestRepositoryMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRequestRepository)(nil).GetAll), ctx)
}

// GetByID mocks base method.
func (m *MockRequestRepository) GetByID(ctx context.Context, id string) (*model.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRequestRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRequestRepository)(nil).GetByID), ctx, id)
}

// GetCountWithThemeId mocks base method.
func (m *MockRequestRepository) GetCountWithThemeId(ctx context.Context, from, to time.Time, themeId string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountWithThemeId", ctx, from, to, themeId)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountWithThemeId indicates an expected call of GetCountWithThemeId.
func (mr *MockRequestRepositoryMockRecorder) GetCountWithThemeId(ctx, from, to, themeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountWithThemeId", reflect.TypeOf((*MockRequestRepository)(nil).GetCountWithThemeId), ctx, from, to, themeId)
}

// GetCountWithThemeIdAndStatus mocks base method.
func (m *MockRequestRepository) GetCountWithThemeIdAndStatus(ctx context.Context, themeId string, status int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountWithThemeIdAndStatus", ctx, themeId, status)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountWithThemeIdAndStatus indicates an expected call of GetCountWithThemeIdAndStatus.
func (mr *MockRequestRepositoryMockRecorder) GetCountWithThemeIdAndStatus(ctx, themeId, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountWithThemeIdAndStatus", reflect.TypeOf((*MockRequestRepository)(nil).GetCountWithThemeIdAndStatus), ctx, themeId, status)
}

// GetFiles mocks base method.
func (m *MockRequestRepository) GetFiles(ctx context.Context, id string) ([]*uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFiles", ctx, id)
	ret0, _ := ret[0].([]*uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFiles indicates an expected call of GetFiles.
func (mr *MockRequestRepositoryMockRecorder) GetFiles(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFiles", reflect.TypeOf((*MockRequestRepository)(nil).GetFiles), ctx, id)
}
