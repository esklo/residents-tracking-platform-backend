// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/service.go -destination=mocks/service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	suggest "github.com/ekomobile/dadata/v2/api/suggest"
	model "github.com/esklo/residents-tracking-platform-backend/internal/model"
	protocol "github.com/go-webauthn/webauthn/protocol"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserService) Create(ctx context.Context, user *model.User) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserServiceMockRecorder) Create(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserService)(nil).Create), ctx, user)
}

// Get mocks base method.
func (m *MockUserService) Get(ctx context.Context, id string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserServiceMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserService)(nil).Get), ctx, id)
}

// GetAll mocks base method.
func (m *MockUserService) GetAll(ctx context.Context, districtId *uuid.UUID) ([]*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, districtId)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockUserServiceMockRecorder) GetAll(ctx, districtId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUserService)(nil).GetAll), ctx, districtId)
}

// Update mocks base method.
func (m *MockUserService) Update(ctx context.Context, user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserServiceMockRecorder) Update(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserService)(nil).Update), ctx, user)
}

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockAuthService) ChangePassword(ctx context.Context, user *model.User, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", ctx, user, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockAuthServiceMockRecorder) ChangePassword(ctx, user, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockAuthService)(nil).ChangePassword), ctx, user, password)
}

// CreateToken mocks base method.
func (m *MockAuthService) CreateToken(ctx context.Context, id uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockAuthServiceMockRecorder) CreateToken(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockAuthService)(nil).CreateToken), ctx, id)
}

// DeletePublicKey mocks base method.
func (m *MockAuthService) DeletePublicKey(ctx context.Context, id []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePublicKey", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePublicKey indicates an expected call of DeletePublicKey.
func (mr *MockAuthServiceMockRecorder) DeletePublicKey(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePublicKey", reflect.TypeOf((*MockAuthService)(nil).DeletePublicKey), ctx, id)
}

// ExchangeToken mocks base method.
func (m *MockAuthService) ExchangeToken(ctx context.Context, tokenString string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeToken", ctx, tokenString)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExchangeToken indicates an expected call of ExchangeToken.
func (mr *MockAuthServiceMockRecorder) ExchangeToken(ctx, tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeToken", reflect.TypeOf((*MockAuthService)(nil).ExchangeToken), ctx, tokenString)
}

// ExchangeTokenFromContext mocks base method.
func (m *MockAuthService) ExchangeTokenFromContext(ctx context.Context) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeTokenFromContext", ctx)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExchangeTokenFromContext indicates an expected call of ExchangeTokenFromContext.
func (mr *MockAuthServiceMockRecorder) ExchangeTokenFromContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeTokenFromContext", reflect.TypeOf((*MockAuthService)(nil).ExchangeTokenFromContext), ctx)
}

// GetPublicKeys mocks base method.
func (m *MockAuthService) GetPublicKeys(ctx context.Context, user *model.User) ([]model.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKeys", ctx, user)
	ret0, _ := ret[0].([]model.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKeys indicates an expected call of GetPublicKeys.
func (mr *MockAuthServiceMockRecorder) GetPublicKeys(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKeys", reflect.TypeOf((*MockAuthService)(nil).GetPublicKeys), ctx, user)
}

// Login mocks base method.
func (m *MockAuthService) Login(ctx context.Context, email, password string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, email, password)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthServiceMockRecorder) Login(ctx, email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthService)(nil).Login), ctx, email, password)
}

// PublicKeyAssertion mocks base method.
func (m *MockAuthService) PublicKeyAssertion(ctx context.Context, flowId []byte, credential *protocol.CredentialAssertionResponse) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicKeyAssertion", ctx, flowId, credential)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicKeyAssertion indicates an expected call of PublicKeyAssertion.
func (mr *MockAuthServiceMockRecorder) PublicKeyAssertion(ctx, flowId, credential any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicKeyAssertion", reflect.TypeOf((*MockAuthService)(nil).PublicKeyAssertion), ctx, flowId, credential)
}

// PublicKeyAttestation mocks base method.
func (m *MockAuthService) PublicKeyAttestation(ctx context.Context, user *model.User, flowId []byte, credential *protocol.CredentialCreationResponse) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicKeyAttestation", ctx, user, flowId, credential)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicKeyAttestation indicates an expected call of PublicKeyAttestation.
func (mr *MockAuthServiceMockRecorder) PublicKeyAttestation(ctx, user, flowId, credential any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicKeyAttestation", reflect.TypeOf((*MockAuthService)(nil).PublicKeyAttestation), ctx, user, flowId, credential)
}

// RequestPublicKeyAssertion mocks base method.
func (m *MockAuthService) RequestPublicKeyAssertion(ctx context.Context) ([]byte, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestPublicKeyAssertion", ctx)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RequestPublicKeyAssertion indicates an expected call of RequestPublicKeyAssertion.
func (mr *MockAuthServiceMockRecorder) RequestPublicKeyAssertion(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestPublicKeyAssertion", reflect.TypeOf((*MockAuthService)(nil).RequestPublicKeyAssertion), ctx)
}

// RequestPublicKeyAttestation mocks base method.
func (m *MockAuthService) RequestPublicKeyAttestation(ctx context.Context, user *model.User) ([]byte, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestPublicKeyAttestation", ctx, user)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RequestPublicKeyAttestation indicates an expected call of RequestPublicKeyAttestation.
func (mr *MockAuthServiceMockRecorder) RequestPublicKeyAttestation(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestPublicKeyAttestation", reflect.TypeOf((*MockAuthService)(nil).RequestPublicKeyAttestation), ctx, user)
}

// MockGeoService is a mock of GeoService interface.
type MockGeoService struct {
	ctrl     *gomock.Controller
	recorder *MockGeoServiceMockRecorder
}

// MockGeoServiceMockRecorder is the mock recorder for MockGeoService.
type MockGeoServiceMockRecorder struct {
	mock *MockGeoService
}

// NewMockGeoService creates a new mock instance.
func NewMockGeoService(ctrl *gomock.Controller) *MockGeoService {
	mock := &MockGeoService{ctrl: ctrl}
	mock.recorder = &MockGeoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGeoService) EXPECT() *MockGeoServiceMockRecorder {
	return m.recorder
}

// BuildingsByCoordinates mocks base method.
func (m *MockGeoService) BuildingsByCoordinates(ctx context.Context, lat, lon float64) ([]*model.GeoBuilding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildingsByCoordinates", ctx, lat, lon)
	ret0, _ := ret[0].([]*model.GeoBuilding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildingsByCoordinates indicates an expected call of BuildingsByCoordinates.
func (mr *MockGeoServiceMockRecorder) BuildingsByCoordinates(ctx, lat, lon any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildingsByCoordinates", reflect.TypeOf((*MockGeoService)(nil).BuildingsByCoordinates), ctx, lat, lon)
}

// GetDistricts mocks base method.
func (m *MockGeoService) GetDistricts(ctx context.Context, areaId int64, level int) ([]*model.GeoDistrict, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDistricts", ctx, areaId, level)
	ret0, _ := ret[0].([]*model.GeoDistrict)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDistricts indicates an expected call of GetDistricts.
func (mr *MockGeoServiceMockRecorder) GetDistricts(ctx, areaId, level any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistricts", reflect.TypeOf((*MockGeoService)(nil).GetDistricts), ctx, areaId, level)
}

// Locate mocks base method.
func (m *MockGeoService) Locate(ctx context.Context, lat, lon float64) (*suggest.AddressSuggestion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Locate", ctx, lat, lon)
	ret0, _ := ret[0].(*suggest.AddressSuggestion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Locate indicates an expected call of Locate.
func (mr *MockGeoServiceMockRecorder) Locate(ctx, lat, lon any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Locate", reflect.TypeOf((*MockGeoService)(nil).Locate), ctx, lat, lon)
}

// Suggest mocks base method.
func (m *MockGeoService) Suggest(ctx context.Context, query string) ([]*suggest.AddressSuggestion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Suggest", ctx, query)
	ret0, _ := ret[0].([]*suggest.AddressSuggestion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Suggest indicates an expected call of Suggest.
func (mr *MockGeoServiceMockRecorder) Suggest(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Suggest", reflect.TypeOf((*MockGeoService)(nil).Suggest), ctx, query)
}

// MockDistrictService is a mock of DistrictService interface.
type MockDistrictService struct {
	ctrl     *gomock.Controller
	recorder *MockDistrictServiceMockRecorder
}

// MockDistrictServiceMockRecorder is the mock recorder for MockDistrictService.
type MockDistrictServiceMockRecorder struct {
	mock *MockDistrictService
}

// NewMockDistrictService creates a new mock instance.
func NewMockDistrictService(ctrl *gomock.Controller) *MockDistrictService {
	mock := &MockDistrictService{ctrl: ctrl}
	mock.recorder = &MockDistrictServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDistrictService) EXPECT() *MockDistrictServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDistrictService) Create(ctx context.Context, areaId int64, fileId *uuid.UUID) (*model.District, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, areaId, fileId)
	ret0, _ := ret[0].(*model.District)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDistrictServiceMockRecorder) Create(ctx, areaId, fileId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDistrictService)(nil).Create), ctx, areaId, fileId)
}

// Get mocks base method.
func (m *MockDistrictService) Get(ctx context.Context, id *uuid.UUID) (*model.District, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.District)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDistrictServiceMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDistrictService)(nil).Get), ctx, id)
}

// GetAll mocks base method.
func (m *MockDistrictService) GetAll(ctx context.Context) ([]*model.District, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*model.District)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockDistrictServiceMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockDistrictService)(nil).GetAll), ctx)
}

// MockFileService is a mock of FileService interface.
type MockFileService struct {
	ctrl     *gomock.Controller
	recorder *MockFileServiceMockRecorder
}

// MockFileServiceMockRecorder is the mock recorder for MockFileService.
type MockFileServiceMockRecorder struct {
	mock *MockFileService
}

// NewMockFileService creates a new mock instance.
func NewMockFileService(ctrl *gomock.Controller) *MockFileService {
	mock := &MockFileService{ctrl: ctrl}
	mock.recorder = &MockFileServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileService) EXPECT() *MockFileServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockFileService) Delete(ctx context.Context, id *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFileServiceMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFileService)(nil).Delete), ctx, id)
}

// GetById mocks base method.
func (m *MockFileService) GetById(ctx context.Context, id *uuid.UUID) (*model.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*model.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockFileServiceMockRecorder) GetById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockFileService)(nil).GetById), ctx, id)
}

// Upload mocks base method.
func (m *MockFileService) Upload(ctx context.Context, filename string, data []byte) (*model.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, filename, data)
	ret0, _ := ret[0].(*model.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockFileServiceMockRecorder) Upload(ctx, filename, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockFileService)(nil).Upload), ctx, filename, data)
}

// MockDepartmentService is a mock of DepartmentService interface.
type MockDepartmentService struct {
	ctrl     *gomock.Controller
	recorder *MockDepartmentServiceMockRecorder
}

// MockDepartmentServiceMockRecorder is the mock recorder for MockDepartmentService.
type MockDepartmentServiceMockRecorder struct {
	mock *MockDepartmentService
}

// NewMockDepartmentService creates a new mock instance.
func NewMockDepartmentService(ctrl *gomock.Controller) *MockDepartmentService {
	mock := &MockDepartmentService{ctrl: ctrl}
	mock.recorder = &MockDepartmentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDepartmentService) EXPECT() *MockDepartmentServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDepartmentService) Create(ctx context.Context, department *model.Department) (*model.Department, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, department)
	ret0, _ := ret[0].(*model.Department)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDepartmentServiceMockRecorder) Create(ctx, department any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDepartmentService)(nil).Create), ctx, department)
}

// Get mocks base method.
func (m *MockDepartmentService) Get(ctx context.Context, id *uuid.UUID) (*model.Department, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.Department)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDepartmentServiceMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDepartmentService)(nil).Get), ctx, id)
}

// GetAll mocks base method.
func (m *MockDepartmentService) GetAll(ctx context.Context, districtId *uuid.UUID) ([]*model.Department, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, districtId)
	ret0, _ := ret[0].([]*model.Department)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockDepartmentServiceMockRecorder) GetAll(ctx, districtId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockDepartmentService)(nil).GetAll), ctx, districtId)
}

// Update mocks base method.
func (m *MockDepartmentService) Update(ctx context.Context, department *model.Department) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, department)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDepartmentServiceMockRecorder) Update(ctx, department any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDepartmentService)(nil).Update), ctx, department)
}

// MockThemeService is a mock of ThemeService interface.
type MockThemeService struct {
	ctrl     *gomock.Controller
	recorder *MockThemeServiceMockRecorder
}

// MockThemeServiceMockRecorder is the mock recorder for MockThemeService.
type MockThemeServiceMockRecorder struct {
	mock *MockThemeService
}

// NewMockThemeService creates a new mock instance.
func NewMockThemeService(ctrl *gomock.Controller) *MockThemeService {
	mock := &MockThemeService{ctrl: ctrl}
	mock.recorder = &MockThemeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThemeService) EXPECT() *MockThemeServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockThemeService) Create(ctx context.Context, department *model.Theme) (*model.Theme, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, department)
	ret0, _ := ret[0].(*model.Theme)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockThemeServiceMockRecorder) Create(ctx, department any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockThemeService)(nil).Create), ctx, department)
}

// Delete mocks base method.
func (m *MockThemeService) Delete(ctx context.Context, id *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockThemeServiceMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockThemeService)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockThemeService) Get(ctx context.Context, id *uuid.UUID) (*model.Theme, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.Theme)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockThemeServiceMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockThemeService)(nil).Get), ctx, id)
}

// GetAll mocks base method.
func (m *MockThemeService) GetAll(ctx context.Context, districtId *uuid.UUID) ([]*model.Theme, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, districtId)
	ret0, _ := ret[0].([]*model.Theme)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockThemeServiceMockRecorder) GetAll(ctx, districtId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockThemeService)(nil).GetAll), ctx, districtId)
}

// GetAllWithDepartment mocks base method.
func (m *MockThemeService) GetAllWithDepartment(ctx context.Context, department *uuid.UUID) ([]*model.Theme, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWithDepartment", ctx, department)
	ret0, _ := ret[0].([]*model.Theme)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWithDepartment indicates an expected call of GetAllWithDepartment.
func (mr *MockThemeServiceMockRecorder) GetAllWithDepartment(ctx, department any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWithDepartment", reflect.TypeOf((*MockThemeService)(nil).GetAllWithDepartment), ctx, department)
}

// Update mocks base method.
func (m *MockThemeService) Update(ctx context.Context, theme *model.Theme) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, theme)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockThemeServiceMockRecorder) Update(ctx, theme any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockThemeService)(nil).Update), ctx, theme)
}

// MockContactService is a mock of ContactService interface.
type MockContactService struct {
	ctrl     *gomock.Controller
	recorder *MockContactServiceMockRecorder
}

// MockContactServiceMockRecorder is the mock recorder for MockContactService.
type MockContactServiceMockRecorder struct {
	mock *MockContactService
}

// NewMockContactService creates a new mock instance.
func NewMockContactService(ctrl *gomock.Controller) *MockContactService {
	mock := &MockContactService{ctrl: ctrl}
	mock.recorder = &MockContactServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContactService) EXPECT() *MockContactServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockContactService) Create(ctx context.Context, contact *model.Contact) (*model.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, contact)
	ret0, _ := ret[0].(*model.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockContactServiceMockRecorder) Create(ctx, contact any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockContactService)(nil).Create), ctx, contact)
}

// Get mocks base method.
func (m *MockContactService) Get(ctx context.Context, id *uuid.UUID) (*model.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockContactServiceMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockContactService)(nil).Get), ctx, id)
}

// MockRequestService is a mock of RequestService interface.
type MockRequestService struct {
	ctrl     *gomock.Controller
	recorder *MockRequestServiceMockRecorder
}

// MockRequestServiceMockRecorder is the mock recorder for MockRequestService.
type MockRequestServiceMockRecorder struct {
	mock *MockRequestService
}

// NewMockRequestService creates a new mock instance.
func NewMockRequestService(ctrl *gomock.Controller) *MockRequestService {
	mock := &MockRequestService{ctrl: ctrl}
	mock.recorder = &MockRequestServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestService) EXPECT() *MockRequestServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRequestService) Create(ctx context.Context, themeId *uuid.UUID, description, address string, contact *model.Contact, geo model.GeoPoint, fileIds []*uuid.UUID) (*model.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, themeId, description, address, contact, geo, fileIds)
	ret0, _ := ret[0].(*model.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRequestServiceMockRecorder) Create(ctx, themeId, description, address, contact, geo, fileIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRequestService)(nil).Create), ctx, themeId, description, address, contact, geo, fileIds)
}

// Get mocks base method.
func (m *MockRequestService) Get(ctx context.Context, id *uuid.UUID) (*model.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRequestServiceMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRequestService)(nil).Get), ctx, id)
}

// GetAll mocks base method.
func (m *MockRequestService) GetAll(ctx context.Context) ([]*model.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*model.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRequestServiceMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRequestService)(nil).GetAll), ctx)
}

// GetAllAsGeoJson mocks base method.
func (m *MockRequestService) GetAllAsGeoJson(ctx context.Context) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAsGeoJson", ctx)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAsGeoJson indicates an expected call of GetAllAsGeoJson.
func (mr *MockRequestServiceMockRecorder) GetAllAsGeoJson(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAsGeoJson", reflect.TypeOf((*MockRequestService)(nil).GetAllAsGeoJson), ctx)
}

// GetCountWithThemeId mocks base method.
func (m *MockRequestService) GetCountWithThemeId(ctx context.Context, from, to time.Time, themeId string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountWithThemeId", ctx, from, to, themeId)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountWithThemeId indicates an expected call of GetCountWithThemeId.
func (mr *MockRequestServiceMockRecorder) GetCountWithThemeId(ctx, from, to, themeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountWithThemeId", reflect.TypeOf((*MockRequestService)(nil).GetCountWithThemeId), ctx, from, to, themeId)
}

// GetCountWithThemeIdAndStatus mocks base method.
func (m *MockRequestService) GetCountWithThemeIdAndStatus(ctx context.Context, themeId string, status model.RequestStatus) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountWithThemeIdAndStatus", ctx, themeId, status)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountWithThemeIdAndStatus indicates an expected call of GetCountWithThemeIdAndStatus.
func (mr *MockRequestServiceMockRecorder) GetCountWithThemeIdAndStatus(ctx, themeId, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountWithThemeIdAndStatus", reflect.TypeOf((*MockRequestService)(nil).GetCountWithThemeIdAndStatus), ctx, themeId, status)
}

// MockAnalyticsService is a mock of AnalyticsService interface.
type MockAnalyticsService struct {
	ctrl     *gomock.Controller
	recorder *MockAnalyticsServiceMockRecorder
}

// MockAnalyticsServiceMockRecorder is the mock recorder for MockAnalyticsService.
type MockAnalyticsServiceMockRecorder struct {
	mock *MockAnalyticsService
}

// NewMockAnalyticsService creates a new mock instance.
func NewMockAnalyticsService(ctrl *gomock.Controller) *MockAnalyticsService {
	mock := &MockAnalyticsService{ctrl: ctrl}
	mock.recorder = &MockAnalyticsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnalyticsService) EXPECT() *MockAnalyticsServiceMockRecorder {
	return m.recorder
}

// RequestsPerTheme mocks base method.
func (m *MockAnalyticsService) RequestsPerTheme(ctx context.Context, from, to time.Time, departmentId *uuid.UUID) ([]*model.RequestsPerTheme, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestsPerTheme", ctx, from, to, departmentId)
	ret0, _ := ret[0].([]*model.RequestsPerTheme)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestsPerTheme indicates an expected call of RequestsPerTheme.
func (mr *MockAnalyticsServiceMockRecorder) RequestsPerTheme(ctx, from, to, departmentId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestsPerTheme", reflect.TypeOf((*MockAnalyticsService)(nil).RequestsPerTheme), ctx, from, to, departmentId)
}

// RequestsPerThemePerDate mocks base method.
func (m *MockAnalyticsService) RequestsPerThemePerDate(ctx context.Context, departmentId *uuid.UUID, from, to time.Time) ([]*model.RequestsPerThemePerDateElement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestsPerThemePerDate", ctx, departmentId, from, to)
	ret0, _ := ret[0].([]*model.RequestsPerThemePerDateElement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestsPerThemePerDate indicates an expected call of RequestsPerThemePerDate.
func (mr *MockAnalyticsServiceMockRecorder) RequestsPerThemePerDate(ctx, departmentId, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestsPerThemePerDate", reflect.TypeOf((*MockAnalyticsService)(nil).RequestsPerThemePerDate), ctx, departmentId, from, to)
}

// Stats mocks base method.
func (m *MockAnalyticsService) Stats(ctx context.Context, departmentId *uuid.UUID) (*model.StatsElement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats", ctx, departmentId)
	ret0, _ := ret[0].(*model.StatsElement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stats indicates an expected call of Stats.
func (mr *MockAnalyticsServiceMockRecorder) Stats(ctx, departmentId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockAnalyticsService)(nil).Stats), ctx, departmentId)
}
